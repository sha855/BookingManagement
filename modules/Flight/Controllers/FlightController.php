<?php
namespace Modules\Flight\Controllers;

use App\Http\Controllers\Controller;
use Modules\Flight\Models\SeatType;
use Modules\Location\Models\LocationCategory;
use Modules\Flight\Models\Flight;
use Illuminate\Http\Request;
use Modules\Location\Models\Location;
use Modules\Review\Models\Review;
use Modules\Core\Models\Attributes;
use DB;
use App\Helpers\Crypto;
use Session;

use Omnipay\Omnipay;


class FlightController extends Controller
{
    protected $flightClass;
    protected $locationClass;
    /**
     * @var string
     */
    private $locationCategoryClass;

    public function __construct(Flight $flightClass, Location $locationClass)
    {
        $this->flightClass = $flightClass;
        $this->locationClass = $locationClass;
    }

    public function callAction($method, $parameters)
    {
        if(!Flight::isEnable())
        {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    public function index(Request $request)
    {

        $is_ajax = $request->query('_ajax');

        if(!empty($request->query('limit'))){
            $limit = $request->query('limit');
        }else{
            $limit = !empty(setting_item("flight_page_limit_item"))? setting_item("flight_page_limit_item") : 9;
        }
        $query = $this->flightClass->search($request->input());
        $list = $query->paginate($limit);
        $markers = [];
        if (!empty($list)) {
            foreach ($list as $row) {
                $markers[] = [
                    "id"      => $row->id,
                    "title"   => $row->title,
                    "lat"     => (float)$row->map_lat,
                    "lng"     => (float)$row->map_lng,
                    "gallery" => $row->getGallery(true),
                    "infobox" => view('Flight::frontend.layouts.search.loop-grid', ['row' => $row,'disable_lazyload'=>1,'wrap_class'=>'infobox-item'])->render(),
                    'marker' => get_file_url(setting_item("flight_icon_marker_map"),'full') ?? url('images/icons/png/pin.png'),
                ];
            }
        }
        $limit_location = 15;
        if( empty(setting_item("flight_location_search_style")) or setting_item("flight_location_search_style") == "normal" ){
            $limit_location = 1000;
        }
        $data = [
            'rows'               => $list,
            'list_location'      => $this->locationClass::where('status', 'publish')->limit($limit_location)->with(['translation'])->get()->toTree(),
            'seatType'           => SeatType::get(),
            'flight_min_max_price' => $this->flightClass::getMinMaxPrice(),
            'markers'            => $markers,
            "blank" => setting_item('search_open_tab') == "current_tab" ? 0 : 1 ,
            "seo_meta"           => $this->flightClass::getSeoMetaForPageList()
        ];
        $layout = setting_item("flight_layout_search", 'normal');
        if ($request->query('_layout')) {
            $layout = $request->query('_layout');
        }
        if ($is_ajax) {
            return $this->sendSuccess([
                'html'    => view('Flight::frontend.layouts.search-map.list-item', $data)->render(),
                "markers" => $data['markers']
            ]);
        }
        $data['attributes'] = Attributes::where('service', 'flight')->orderBy("position","desc")->with(['terms'=>function($query){
            $query->withCount('flight');
        },'translation'])->get();

        if ($layout == "map") {
            $data['body_class'] = 'has-search-map';
            $data['html_class'] = 'full-page';
            return view('Flight::frontend.search-map', $data);
        }
        return view('Flight::frontend.search', $data);
    }

    public function getData(Request $request,$id){
        $row = $this->flightClass::with(['flightSeat.seatType','airportFrom','airportTo','airline','bookingPassengers'])->find($id);
        if ( empty($row)) {
            return $this->sendError('no found');
        }else{
            if(!empty($row->airline)){
                $row->airline->append(['image_url']);
            }
            $bookingPassengers = $row->bookingPassengers->countBy('seat_type')->toArray();
            if(!empty($row->flightSeat)){
                foreach ($row->flightSeat as &$value){
                    if(!empty($bookingPassengers[$value->seat_type])){
                        $value->max_passengers = $value->max_passengers - $bookingPassengers[$value->seat_type];
                        if($value->max_passengers <0){
                            $value->max_passengers = 0;
                        }
                    }
                    $value->price_html = format_money($value->price);
                    $value->number = 0;
                }
            }
            $row->departure_time_html = $row->departure_time->format('H:i');
            $row->departure_date_html = $row->departure_time->format('D, d M y');
            $row->arrival_time_html = $row->arrival_time->format('H:i');
            $row->arrival_date_html = $row->arrival_time->format('D, d M y');

            return $this->sendSuccess(['data'=>$row->toArray()],'founded');
        }
    }


    
public function Vish(){
 return view('Flight::frontend.vish');
}
   
  
public function VishStatus(){

    return view('Flight::frontend.visa-status');
   }


   public function visaApply(){

    $data = DB::table('visa_entry')->get();
   
    $visadata = [];
    
    foreach ($data as $dt) {
        $details = DB::table('visa_entry_details')->where('entry_id', $dt->id)->get();
        $dt->visa_entry_details = $details;
        $visadata[] = $dt;
    }

   

    return view ('Flight::frontend.visa-apply',compact('visadata'));
   }

//    public function visasubmit(Request $request)
//    {
//        $passport_first_page = $request->hasFile('passport_first_page') ? $request->file('passport_first_page') : [];
//        $passport_second_page = $request->hasFile('passport_second_page') ? $request->file('passport_second_page') : [];
//        $passport_size_photo = $request->hasFile('passport_size_photo') ? $request->file('passport_size_photo') : [];
   
//        foreach ($request->firstname as $key => $firstname) {
//            $passportfirst = null;
//            if (isset($passport_first_page[$key]) && $passport_first_page[$key] !== null) {
//                $passportfirst = date('mdYHis').uniqid().'.'.$passport_first_page[$key]->getClientOriginalExtension();
//                $passport_first_page[$key]->move(public_path('visa'), $passportfirst);
//            }
   
//            // Upload passport second page
//            $passportsecond = null;
//            if (isset($passport_second_page[$key]) && $passport_second_page[$key] !== null) {
//                $passportsecond = date('mdYHis').uniqid().'.'.$passport_second_page[$key]->getClientOriginalExtension();
//                $passport_second_page[$key]->move(public_path('visa'), $passportsecond);
//            }
   
//            // Upload passport size photo
//            $passportphoto = null;
//            if (isset($passport_size_photo[$key]) && $passport_size_photo[$key] !== null) {
//                $passportphoto = date('mdYHis').uniqid().'.'.$passport_size_photo[$key]->getClientOriginalExtension();
//                $passport_size_photo[$key]->move(public_path('visa'), $passportphoto);
//            }
   
//            $data = DB::table('visa_booking_detail')->insert([
//                'user_id' => auth()->user()->id,
//                'entry_id' => $request->entry_id,
//                'entry_detail_id' => $request->entry_detail_id,
//                'nationality' => $request->nationality,
//                'email' => $request->email[$key],
//                'alternate_number' => $request->alternate_number[$key],
//                'traveldate' => $request->traveldate,
//                'place_issues' => $request->place_issues[$key],
//                'firstname' => $firstname,
//                'lastname' => $request->lastname[$key],
//                'dob' => $request->dob[$key],
//                'child' => $request->child,
//                'adult' => $request->adult,
//                'passport_no' => $request->passportnumber[$key],
//                'passport_expiry' => $request->passport_expiry[$key],
//                'contact_no' => $request->contact[$key],
//                'passport_first_page' => $passportfirst !== null ? '/visa/'.$passportfirst : null,
//                'passport_second_page' => $passportsecond !== null ? '/visa/'.$passportsecond : null,
//                'passport_size_photo' => $passportphoto !== null ? '/visa/'.$passportphoto : null,
//                'payment_status' => 'unpaid',
//                'visa_status' => 'pending'
//            ]);
//        }
   
//        return redirect('confirm-visa');
//    }
   

public function visasubmit(Request $request)
{
  
    
    $passport_first_page = $request->hasFile('passport_first_page') ? $request->file('passport_first_page') : [];
    $passport_second_page = $request->hasFile('passport_second_page') ? $request->file('passport_second_page') : [];
    $passport_size_photo = $request->hasFile('passport_size_photo') ? $request->file('passport_size_photo') : [];

     $numberkey = rand(10000000, 99999999);

    foreach ($request->firstname as $key => $firstname) {
        $passportfirst = null;
    if (isset($passport_first_page[$key]) && $passport_first_page[$key] !== null && $passport_first_page[$key]->isValid()) {
        $passportfirst = date('mdYHis').uniqid().'.'.$passport_first_page[$key]->getClientOriginalExtension();
        $passport_first_page[$key]->move(public_path('visa'), $passportfirst);
    }

    // Upload passport second page if it's set and is a valid file
    $passportsecond = null;
    if (isset($passport_second_page[$key]) && $passport_second_page[$key] !== null && $passport_second_page[$key]->isValid()) {
        $passportsecond = date('mdYHis').uniqid().'.'.$passport_second_page[$key]->getClientOriginalExtension();
        $passport_second_page[$key]->move(public_path('visa'), $passportsecond);
    }

    // Upload passport size photo if it's set and is a valid file
    $passportphoto = null;
    if (isset($passport_size_photo[$key]) && $passport_size_photo[$key] !== null && $passport_size_photo[$key]->isValid()) {
        $passportphoto = date('mdYHis').uniqid().'.'.$passport_size_photo[$key]->getClientOriginalExtension();
        $passport_size_photo[$key]->move(public_path('visa'), $passportphoto);
    }

        $data = DB::table('visa_booking_detail')->insert([
          
            'user_id' => auth()->user()->id,
            'entry_id' => $request->entry_id,
            'entry_detail_id' => $request->entry_detail_id,
            'nationality' => $request->nationality,
            'email' => $request->email[$key],
            'contact_std_code' => $request->contact_std_code[$key],
            'alternate_number' => $request->alternate_number[$key],
            'traveldate' => $request->traveldate,
             'visakey'   => $numberkey,
            'place_issues' => $request->place_issues[$key],
            'firstname' => $firstname,
            'lastname' => $request->lastname[$key],
            'dob' => $request->dob[$key],
            'child' => $request->child,
            'adult' => $request->adult,
             'passport_no' => $request->passportnumber[$key],
            'passport_expiry' => $request->passport_expiry[$key],
            'contact_no' => $request->contact[$key],
            'passport_first_page' => $passportfirst !== null ? '/visa/'.$passportfirst : null,
            'passport_second_page' => $passportsecond !== null ? '/visa/'.$passportsecond : null,
            'passport_size_photo' => $passportphoto !== null ? '/visa/'.$passportphoto : null,
            'payment_status' => 'unpaid',
            'visa_status' => 'pending'
         
         ]);

    }    
    
 session()->put('visa_key', $numberkey);
       
 return redirect('confirm-visa');
   
}


   


public function visaConfirm(Request $request)
{
    
     if(auth()->check())
     {
         
         $userId = auth()->user()->id;
         
     }else{
         
         return redirect('visa-page');
         
     }
 
 $keyid = Session::get('visa_key');
 
 
 $data = DB::table('visa_booking_detail')
        ->where('user_id',$userId)
        ->where('visakey',$keyid)
        ->get();

      
        return view('Flight::frontend.visaconfirmation' ,compact('data'));
        
}
 

public function  visaApplyPage(){

    $data = DB::table('visa_entry')->get();
    $visadata = [];
    
    foreach ($data as $dt) {
        $details = DB::table('visa_entry_details')->where('entry_id', $dt->id)->get();
        $dt->visa_entry_details = $details;
        $visadata[] = $dt;
    }
 

   return view ('Flight::frontend.visa-apply-page',compact('visadata'));  
}



public function showPaymentForm(Request $request)
{
   
   
    $price = floatval($request->price);
    $uniquekey = $request->code;
    $user_id = auth()->user()->id;
    $gateway = Omnipay::create('PayPal_Rest');
    $gateway->setClientId(config('paypal.paypal.client_id'));
    $gateway->setSecret(config('paypal.paypal.secret'));
    $gateway->setTestMode(config('paypal.paypal.mode') === 'sandbox');

    $parameters = [
        'amount' =>  $price,
        'currency' => 'USD',
        'returnUrl' => 'https://roamiodeals.techdocklabs.com/paymentSuccess', // Replace with your success URL
        'cancelUrl' => 'http://127.0.0.1:8000/cart', // Replace with your cancel URL
      
    ];
     

  Session::put('unique_key',$uniquekey);
     
     
     Session::put('model_type','visa');
     
     
     
   
    $response = $gateway->purchase($parameters)->send();

    if ($response->isRedirect()) {
       
        return redirect($response->getRedirectUrl());
    } else {
       
        $errorMessage = $response->getMessage();
     
    }
   
}


public function deleteVisaProcessing(request $request)
{
    
      $data = DB::table('visa_booking_detail')->where('id',$request->id)->delete();
    
      if($data)
      {
           return redirect()->back()->with('visa_deleted','visa deleted option done');
      }
     
}


public function editVisaPage(request $request)
{
    
    $id = $request->id;
    
    $data = DB::table('visa_booking_detail')->where('id',$id)->first();
    
    
    return view ('Flight::frontend.editVisaPage',compact('data'));  
    
}

public function drafteditVisaPage(request $request)
{
    
    $id = $request->id;
    
    $data = DB::table('visa_booking_detail')->where('id',$id)->first();
    
    
    return view ('Flight::frontend.drafteditVisaPage',compact('data'));  
    
}



public function editdraftVisaProcessing(request $request)
{
    

$passportfirst = null;
if ($request->hasFile('passport_first_page')) {
    $passportfirst = date('mdYHis') . uniqid() . '.' . $request->file('passport_first_page')->getClientOriginalExtension();
    $request->file('passport_first_page')->move(public_path('visa'), $passportfirst);
}

$passportsecond = null;
if ($request->hasFile('passport_second_page')) {
    $passportsecond = date('mdYHis') . uniqid() . '.' . $request->file('passport_second_page')->getClientOriginalExtension();
    $request->file('passport_second_page')->move(public_path('visa'), $passportsecond);
}

$passportphoto = null;
if ($request->hasFile('passport_size_photo')) {
    $passportphoto = date('mdYHis') . uniqid() . '.' . $request->file('passport_size_photo')->getClientOriginalExtension();
    $request->file('passport_size_photo')->move(public_path('visa'), $passportphoto);
}

// Get the existing data from the database
$data = DB::table('visa_booking_detail')->where('id', $request->id)->first();

// Update only the fields that have new values
$updateData = [
    'user_id' => auth()->user()->id,
    'email' => $request->email,
    'alternate_number' => $request->alternate_number,
    'traveldate' => $request->traveldate,
    'place_issues' => $request->place_issues,
    'firstname' => $request->firstname,
    'lastname' => $request->lastname,
    'dob' => $request->dob,
    'child' => $request->child,
    'adult' => $request->adult,
     'contact_std_code' => $request->contact_std_code,
    'passport_no' => $request->passportnumber,
    'passport_expiry' => $request->passport_expiry,
    'contact_no' => $request->contact,
    'payment_status' => 'unpaid',
    'visa_status' => 'pending'
];

// Check if files were uploaded and update the corresponding fields
if ($passportfirst) {
    $updateData['passport_first_page'] = '/visa/' . $passportfirst;
}

if ($passportsecond) {
    $updateData['passport_second_page'] = '/visa/' . $passportsecond;
}

if ($passportphoto) {
    $updateData['passport_size_photo'] = '/visa/' . $passportphoto;
}

// Update the database with the new data
$data = DB::table('visa_booking_detail')->where('id', $request->id)->update($updateData);

    
      if($data)
      {
           return redirect('payforvisa/'.$request->id)->with('visa_updated_processing','visa deleted option done');
      }
     
}



public function editVisaProcessing(request $request)
{
    

$passportfirst = null;
if ($request->hasFile('passport_first_page')) {
    $passportfirst = date('mdYHis') . uniqid() . '.' . $request->file('passport_first_page')->getClientOriginalExtension();
    $request->file('passport_first_page')->move(public_path('visa'), $passportfirst);
}

$passportsecond = null;
if ($request->hasFile('passport_second_page')) {
    $passportsecond = date('mdYHis') . uniqid() . '.' . $request->file('passport_second_page')->getClientOriginalExtension();
    $request->file('passport_second_page')->move(public_path('visa'), $passportsecond);
}

$passportphoto = null;
if ($request->hasFile('passport_size_photo')) {
    $passportphoto = date('mdYHis') . uniqid() . '.' . $request->file('passport_size_photo')->getClientOriginalExtension();
    $request->file('passport_size_photo')->move(public_path('visa'), $passportphoto);
}

// Get the existing data from the database
$data = DB::table('visa_booking_detail')->where('id', $request->id)->first();

// Update only the fields that have new values
$updateData = [
    'user_id' => auth()->user()->id,
    'email' => $request->email,
    'alternate_number' => $request->alternate_number,
    'traveldate' => $request->traveldate,
    'place_issues' => $request->place_issues,
    'firstname' => $request->firstname,
    'lastname' => $request->lastname,
    'dob' => $request->dob,
    'child' => $request->child,
    'adult' => $request->adult,
    'passport_no' => $request->passportnumber,
    'passport_expiry' => $request->passport_expiry,
    'contact_no' => $request->contact,
     'contact_std_code' => $request->contact_std_code,
    'payment_status' => 'unpaid',
    'visa_status' => 'pending'
];

// Check if files were uploaded and update the corresponding fields
if ($passportfirst) {
    $updateData['passport_first_page'] = '/visa/' . $passportfirst;
}

if ($passportsecond) {
    $updateData['passport_second_page'] = '/visa/' . $passportsecond;
}

if ($passportphoto) {
    $updateData['passport_size_photo'] = '/visa/' . $passportphoto;
}

// Update the database with the new data
$data = DB::table('visa_booking_detail')->where('id', $request->id)->update($updateData);

    
      if($data)
      {
           return redirect('confirm-visa')->with('visa_updated_processing','visa deleted option done');
      }
     
}

public function VisaDetails()
{
    $id = null;
    if (auth()->check()) {
        $id = auth()->user()->id;
    }

    // Paginate the details
    $detailsQuery = DB::table('visa_booking_detail')
        ->join('visa_entry','visa_booking_detail.entry_id', '=', 'visa_entry.id')
        ->select(
            'visa_booking_detail.id as booking_detail_id',
            'visa_booking_detail.user_id',
            'visa_booking_detail.entry_id',
            'visa_booking_detail.payment_status',
            'visa_booking_detail.firstname',
            'visa_booking_detail.lastname',
            'visa_booking_detail.dob',
            'visa_booking_detail.passport_second_page',
            'visa_booking_detail.passport_first_page',
            'visa_booking_detail.passport_size_photo',
            'visa_booking_detail.passport_second_page',
            'visa_entry.*'
        )
        ->where('visa_booking_detail.user_id', $id)
        ->where('visa_booking_detail.payment_status', 'unpaid');

    $details = $detailsQuery->paginate(10);

    // Paginate the applied
    $appliedQuery = DB::table('visa_booking_detail')
        ->join('visa_entry', 'visa_booking_detail.entry_id', '=', 'visa_entry.id')
        ->where('user_id', $id)
        ->where('payment_status', 'paid');

    $applied = $appliedQuery->paginate(10);

    return view('Flight::frontend.visa-details', compact('details', 'applied'));
}


public function payingfordraftvisa(Request $request)
{
 
    $datas = DB::table('visa_booking_detail')
        ->where('visa_status', 'pending')
        ->where('payment_status','unpaid')
        ->where('id',$request->id)
        ->get();
  
    return view('Flight::frontend.visaconfirmation' ,compact('datas'));
        
}



}