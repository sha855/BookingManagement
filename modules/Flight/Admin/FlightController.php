<?php
    /**
     * Created by PhpStorm.
     * User: Admin
     * Date: 7/30/2019
     * Time: 1:56 PM
     */

    namespace Modules\Flight\Admin;

    use Illuminate\Http\Request;
    use Illuminate\Support\Facades\Auth;
    use Illuminate\Support\Facades\Validator;
    use Modules\AdminController;
    use Modules\Core\Events\CreatedServicesEvent;
    use Modules\Core\Events\UpdatedServiceEvent;
    use Modules\Core\Models\Attributes;
    use Modules\Location\Models\Location;
    use Modules\Location\Models\LocationCategory;
    use Modules\Flight\Models\Flight;
    use Modules\Flight\Models\FlightTerm;
    use Session;
    use DB;

    class FlightController extends AdminController
    {
        protected $space;
        protected $flight_term;
        protected $attributes;
        protected $location;
        /**
         * @var string
         */
        private $locationCategoryClass;
        /**
         * @var string
         */
        private $flight;

        public function __construct()
        {
            $this->setActiveMenu(route('flight.admin.index'));
            $this->flight = Flight::class;
            $this->flight_term = FlightTerm::class;
            $this->attributes = Attributes::class;
            $this->location = Location::class;
            $this->locationCategoryClass = LocationCategory::class;
        }

        public function callAction($method, $parameters)
        {
            if (!Flight::isEnable()) {
                return redirect('/');
            }
            return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
        }

        public function index(Request $request)
        {
            

            $data = DB::table('visa_entry')->get();
            return view('Flight::admin.index', compact('data'));
        }
        
        
        public function termcondition()
        { 
            $data = DB::table('visa_term_condition')->where('id','1')->first();
            
            return view('Flight::admin.terms',compact('data'));
            
        }
        
        
        public function updatetermscondition(request $request)
        {
            
            DB::table('visa_term_condition')->where('id','1')->update([
                'discription' => $request->discription,
                ]);
            return redirect()->back()->with('dataUpdated','data updated successfully');
            
        }
        
        
        

        public function recovery(Request $request)
        {
            $this->checkPermission('flight_view');
            $query = $this->flight::onlyTrashed();
            $query->orderBy('id', 'desc');
            if (!empty($flight_name = $request->input('s'))) {
                $query->where('title', 'LIKE', '%'.$flight_name.'%');
                $query->orderBy('title', 'asc');
            }

            if ($this->hasPermission('flight_manage_others')) {
                if (!empty($author = $request->input('vendor_id'))) {
                    $query->where('author_id', $author);
                }
            } else {
                $query->where('author_id', Auth::id());
            }
            $data = [
                'rows'                 => $query->with(['author'])->paginate(20),
                'flight_manage_others' => $this->hasPermission('flight_manage_others'),
                'recovery'             => 1,
                'breadcrumbs'          => [
                    [
                        'name' => __('Flights'),
                        'url'  => route('space.admin.index')
                    ],
                    [
                        'name'  => __('Recovery'),
                        'class' => 'active'
                    ],
                ],
                'page_title'           => __("Recovery Flight Management")
            ];
            return view('Flight::admin.flight.index', $data);
        }

    public function create(Request $request)
    {

       $id = $request->id;

       $data = DB::table('visa_entry')->where('id',$id)->first();

       $datachild = DB::table('visa_entry_details')->where('entry_id',$id)->get();


        return view('Flight::admin.detail', compact('data','datachild'));
    }

        public function edit(Request $request, $id)
        {
            // $row =DB::table('visa_entry_details')->where('id',$id)->get();
            
            
            // return view('Flight::admin.detail', compact('row'));
        }

        public function store(Request $request)
        { 
            
            if(!$request->id)
            {

               $data = DB::table('visa_entry_details')->insert([
                  
                  'entry_id' =>$request->entry_id,
                  'days' =>$request->days,
                   'title'=>$request->title,
                   'discription'=>$request->discription,
                   'price' =>$request->price,
            
                ]);
                
                return redirect()->back()->with('dataAdded','data added successfully');
              
                
            }else{
                
                $ip=0;

               foreach($request->id as  $d)
               {
             
                    $data = DB::table('visa_entry_details')->where('id',$d)->update([
                
                   'days' =>$request->days[$ip],
                   'title'=>$request->title[$ip],
                   'discription'=>$request->discription[$ip],
                   'price' =>$request->price[$ip],
            
                ]);
                    $ip++; 
                    
               }
            
               
                
                return redirect()->back()->with('dataUpdated','data updated successfully');
                
                
            }
            
           
            

        }
        public function saveTerms($row, $request)
        {
            $this->checkPermission('flight_manage_attributes');
            if (empty($request->input('terms'))) {
                $this->flight_term::where('target_id', $row->id)->delete();
            } else {
                $term_ids = $request->input('terms');
                foreach ($term_ids as $term_id) {
                    $this->flight_term::firstOrCreate([
                        'term_id'   => $term_id,
                        'target_id' => $row->id
                    ]);
                }
                $this->flight_term::where('target_id', $row->id)->whereNotIn('term_id', $term_ids)->delete();
            }
        }
        
        
        public function addentry(request $request)
        {

             if(!$request->id)
            {
        
              $data = DB::table('visa_entry')->insert([
                  
                  'entry' => $request->entry,
                  
                  ]);
                  
                  if($data)
                  {
                      
                      return redirect()->back()->with('datasuccess','entry added successfully');
                    
                  }else{
                        return redirect()->back()->with('faildat','entry failed');
                      
                  }

              }else{


                $data = DB::table('visa_entry')->where('id',$request->id)->update([
                  
                  'entry' => $request->entry,
                  
                  ]);
                  
                  if($data)
                  {
                      
                      return redirect()->back()->with('dataUpdated','entry added successfully');
                    
                  }else{
                        return redirect()->back()->with('faildat','entry failed');
                      
                  }


              }



            
            
        }

        public function bulkEdit(Request $request)
        {

            $ids = $request->input('ids');
            $action = $request->input('action');
            if (empty($ids) or !is_array($ids)) {
                return redirect()->back()->with('error', __('No items selected!'));
            }
            if (empty($action)) {
                return redirect()->back()->with('error', __('Please select an action!'));
            }

            switch ($action) {
                case "delete":
                    foreach ($ids as $id) {
                        $query = $this->flight::where("id", $id);
                        if (!$this->hasPermission('flight_manage_others')) {
                            $query->where("create_user", Auth::id());
                            $this->checkPermission('flight_delete');
                        }
                        $row = $query->first();
                        if (!empty($row)) {
                            $row->delete();
                            event(new UpdatedServiceEvent($row));

                        }
                    }
                    return redirect()->back()->with('success', __('Deleted success!'));
                    break;
                case "permanently_delete":
                    foreach ($ids as $id) {
                        $query = $this->flight::where("id", $id);
                        if (!$this->hasPermission('flight_manage_others')) {
                            $query->where("create_user", Auth::id());
                            $this->checkPermission('flight_delete');
                        }
                        $row = $query->withTrashed()->first();
                        if ($row) {
                            $row->forceDelete();
                        }
                    }
                    return redirect()->back()->with('success', __('Permanently delete success!'));
                    break;
                case "recovery":
                    foreach ($ids as $id) {
                        $query = $this->flight::withTrashed()->where("id", $id);
                        if (!$this->hasPermission('flight_manage_others')) {
                            $query->where("create_user", Auth::id());
                            $this->checkPermission('flight_delete');
                        }
                        $row = $query->first();
                        if (!empty($row)) {
                            $row->restore();
                            event(new UpdatedServiceEvent($row));

                        }
                    }
                    return redirect()->back()->with('success', __('Recovery success!'));
                    break;
                case "clone":
                    $this->checkPermission('flight_create');
                    foreach ($ids as $id) {
                        (new $this->flight())->saveCloneByID($id);
                    }
                    return redirect()->back()->with('success', __('Clone success!'));
                    break;
                default:
                    // Change status
                    foreach ($ids as $id) {
                        $query = $this->flight::where("id", $id);
                        if (!$this->hasPermission('flight_manage_others')) {
                            $query->where("create_user", Auth::id());
                            $this->checkPermission('flight_update');
                        }
                        $row = $query->first();
                        $row->status = $action;
                        $row->save();
                        event(new UpdatedServiceEvent($row));
                    }
                    return redirect()->back()->with('success', __('Update success!'));
                    break;
            }


        }


        public function deleteentry(request $request)
        {

    $id = $request->id;

    $get = DB::table('visa_entry')->where('id',$id)->delete();

    $data = DB::table('visa_entry_details')->where('entry_id',$id)->delete();

    return redirect()->back()->with('datadeleted','data deleted successfully');

        }
        
        
   public function updateVisa(request $request)
   {
       
       
         $id = $request->id;
         
           if($request->discription !== NULL)
    {
        $discript = $request->discription;
        
    }else{
        
         $discript = "NULL";
    }
         
    
         
         

// if ($request->visa_status == "processed") {
//     DB::table('visa_status')->insert([
//           'visa_id' => $id,
//           'user_id' => $request->user_id,
//           'title' => $request->visa_status,
//           'status' =>"true",
//           'discription' =>"your visa is processed,Soon we update is visa is approved or rejected",
//         ]);
// }


//  if($request->visa_status == "rejected")
//  {
//       DB::table('visa_status')->insert([
//           'visa_id' => $id,
//           'user_id' => $request->user_id,
//           'title' => $request->visa_status,
//           'status' =>"true",
//             'file' => '/visa/'.$request->discriptionImage,
//           'discription' =>$discript,
//         ]);
//   }
 
 
 
//  if($request->visa_status == "approved")
//  {
//       DB::table('visa_status')->insert([
//           'visa_id' => $id,
//           'user_id' => $update->user_id,
//           'title' => $request->visa_status,
//           'status' =>"true",
//             'file' => '/visa/'.$request->discriptionImage,
//           'discription' =>$discript,
//         ]);
//  }


  
    
  
    $passportfirst = null;
    $passportsecond = null;
    $passportphoto = null;
    $discriptionphoto = null;

    if ($request->hasFile('passport_first_page')) {
        $passportfirst = date('mdYHis') . uniqid() . '.' . $request->passport_first_page->extension();
        $request->passport_first_page->move(public_path('visa'), $passportfirst);
    }

    if ($request->hasFile('passport_second_page')) {
        $passportsecond = date('mdYHis') . uniqid() . '.' . $request->passport_second_page->extension();
        $request->passport_second_page->move(public_path('visa'), $passportsecond);
    }

    if ($request->hasFile('passport_size_photo')) {
        $passportphoto = date('mdYHis') . uniqid() . '.' . $request->passport_size_photo->extension();
        $request->passport_size_photo->move(public_path('visa'), $passportphoto);
    }
    
    
    if ($request->hasFile('passport_size_photo')) {
        $passportphoto = date('mdYHis') . uniqid() . '.' . $request->passport_size_photo->extension();
        $request->passport_size_photo->move(public_path('visa'), $passportphoto);
    }
    
    if ($request->hasFile('discriptionImage')) {
        $discriptionphoto = date('mdYHis') . uniqid() . '.' . $request->discriptionImage->extension();
        $request->discriptionImage->move(public_path('visa'), $discriptionphoto);
    }
     
     
    

    
  
    $updateData = [
        'email' => $request->email,
        'alternate_number' => $request->alternate_number,
        'place_issues' => $request->place_issues,
        'firstname' => $request->firstname,
        'lastname' => $request->lastname,
        'dob' => $request->dob,
        'passport_no' => $request->passport_no,
        'passport_expiry' => $request->passport_expiry,
        'contact_no' => $request->contact_no,
        'payment_status'=>$request->payment_status,
        'visa_status' => $request->visa_status,
        'discription' =>$discript,
       
    ];

    if ($passportfirst) {
        $updateData['passport_first_page'] = '/visa/' . $passportfirst;
    }

    if ($passportsecond) {
        $updateData['passport_second_page'] = '/visa/' . $passportsecond;
    }

    if ($passportphoto) {
        $updateData['passport_size_photo'] = '/visa/' . $passportphoto;
    }
    
     if ($discriptionphoto) {
        $updateData['discriptionImage'] = '/visa/' . $discriptionphoto;
    }
    

    $update = DB::table('visa_booking_detail')->where('id', $id)->update($updateData);

    if($update) {
        
       return redirect()->back()->with('visaUpdated','VisaupdatedSuccessfully');
       
    }else{
          
          return redirect()->back()->with('visaFail','VisaFailed');
    } 
}

 
 
    public function deleteVisa(request $request)
    {
           $id = $request->id;
        
           $data = DB::table('visa_booking_detail')->where('id',$id)->delete();
        
           if($data)
           {
               
           return redirect()->back()->with('DataDeleted','Data deleted successfully');  
           
          }else{
              
            return redirect()->back()->with('Datadeltedfailed','data not deleted something error');
            
          }
    }





    }
